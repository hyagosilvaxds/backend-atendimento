import { PrismaClient, PermissionAction, PermissionResource, UserRole } from '@prisma/client';

const prisma = new PrismaClient();

const ACTIONS: PermissionAction[] = ['CREATE', 'READ', 'UPDATE', 'DELETE', 'MANAGE'];

const RESOURCES: PermissionResource[] = [
  'SESSIONS',
  'CONTACTS',
  'MESSAGES',
  'ORG_SETTINGS',
  'ORG_USERS',
  'REPORTS',
  'INTEGRATIONS',
  'WEBHOOKS',
  'AUTOMATIONS',
  'TAGS',
  'DEPARTMENTS',
  'QUEUES',
  'WHATSAPP_SESSIONS'
];

export async function createPermission(action: PermissionAction, resource: PermissionResource, description?: string) {
  try {
    const permission = await prisma.permission.create({
      data: {
        action,
        resource,
        description: description || `${action} ${resource}`,
      },
    });
    console.log(`‚úÖ Permiss√£o criada: ${permission.action} ${permission.resource}`);
    return permission;
  } catch (error: any) {
    if (error.code === 'P2002') {
      console.log(`‚ö†Ô∏è  Permiss√£o j√° existe: ${action} ${resource}`);
      return await prisma.permission.findUnique({
        where: {
          action_resource: {
            action,
            resource,
          },
        },
      });
    }
    throw error;
  }
}

export async function createAllPermissions() {
  console.log('üöÄ Criando todas as permiss√µes...\n');
  
  const permissions: any[] = [];
  
  for (const resource of RESOURCES) {
    for (const action of ACTIONS) {
      const permission = await createPermission(action, resource);
      if (permission) {
        permissions.push(permission);
      }
    }
  }
  
  console.log(`\n‚úÖ Total de permiss√µes criadas/verificadas: ${permissions.length}`);
  return permissions;
}

export async function assignPermissionToRole(role: UserRole, permissionId: string, organizationId?: string) {
  try {
    const rolePermission = await prisma.rolePermission.create({
      data: {
        role,
        permissionId,
        organizationId,
      },
    });
    console.log(`‚úÖ Permiss√£o ${permissionId} atribu√≠da ao role ${role}`);
    return rolePermission;
  } catch (error: any) {
    if (error.code === 'P2002') {
      console.log(`‚ö†Ô∏è  Permiss√£o j√° atribu√≠da ao role`);
      return null;
    }
    throw error;
  }
}

export async function assignAllPermissionsToRole(roleName: UserRole) {
  console.log(`üöÄ Atribuindo permiss√µes ao role: ${roleName}...\n`);
  
  const permissions = await prisma.permission.findMany();
  
  let assignedCount = 0;
  
  for (const permission of permissions) {
    // L√≥gica para determinar quais permiss√µes cada role deve ter
    let shouldAssign = false;
    
    switch (roleName) {
      case 'SUPER_ADMIN':
        shouldAssign = true; // Super admin tem todas as permiss√µes
        break;
        
      case 'ORG_ADMIN':
        // Org admin tem quase todas as permiss√µes da organiza√ß√£o
        shouldAssign = true;
        break;
        
      case 'ORG_USER':
        // Usu√°rio da organiza√ß√£o tem permiss√µes limitadas
        shouldAssign = ['SESSIONS', 'CONTACTS', 'MESSAGES', 'WHATSAPP_SESSIONS', 'TAGS'].includes(permission.resource) &&
                      !['DELETE', 'MANAGE'].includes(permission.action);
        break;
        
      case 'ORG_VIEWER':
        // Visualizador tem apenas leitura limitada
        shouldAssign = ['SESSIONS', 'CONTACTS', 'MESSAGES', 'REPORTS'].includes(permission.resource) &&
                      ['READ'].includes(permission.action);
        break;
    }
    
    if (shouldAssign) {
      await assignPermissionToRole(roleName, permission.id);
      assignedCount++;
    }
  }
  
  console.log(`\n‚úÖ Total de permiss√µes atribu√≠das ao ${roleName}: ${assignedCount}`);
}

export async function createWhatsAppPermissions() {
  console.log('üöÄ Criando permiss√µes espec√≠ficas do WhatsApp...\n');
  
  const whatsappActions: PermissionAction[] = ['CREATE', 'READ', 'UPDATE', 'DELETE', 'MANAGE'];
  const whatsappPermissions: any[] = [];
  
  for (const action of whatsappActions) {
    const permission = await createPermission(action, 'WHATSAPP_SESSIONS', 
      `${action} WhatsApp sessions - manage WhatsApp connections and QR codes`);
    if (permission) {
      whatsappPermissions.push(permission);
    }
  }
  
  return whatsappPermissions;
}

export async function assignWhatsAppPermissionsToAdmins() {
  console.log('üöÄ Atribuindo permiss√µes do WhatsApp aos administradores...\n');
  
  const whatsappPermissions = await prisma.permission.findMany({
    where: { resource: 'WHATSAPP_SESSIONS' },
  });
  
  const adminRoles: UserRole[] = ['SUPER_ADMIN', 'ORG_ADMIN'];
  
  for (const role of adminRoles) {
    for (const permission of whatsappPermissions) {
      await assignPermissionToRole(role, permission.id);
    }
  }
  
  console.log('‚úÖ Permiss√µes do WhatsApp atribu√≠das aos administradores');
}

// Fun√ß√£o principal para executar opera√ß√µes espec√≠ficas
async function main() {
  const command = process.argv[2];
  
  try {
    switch (command) {
      case 'create-all':
        await createAllPermissions();
        break;
        
      case 'create-whatsapp':
        await createWhatsAppPermissions();
        break;
        
      case 'assign-whatsapp-admins':
        await assignWhatsAppPermissionsToAdmins();
        break;
        
      case 'assign-all-super-admin':
        await assignAllPermissionsToRole('SUPER_ADMIN');
        break;
        
      case 'assign-all-org-admin':
        await assignAllPermissionsToRole('ORG_ADMIN');
        break;
        
      case 'assign-all-org-user':
        await assignAllPermissionsToRole('ORG_USER');
        break;
        
      case 'assign-all-org-viewer':
        await assignAllPermissionsToRole('ORG_VIEWER');
        break;
        
      case 'setup-complete':
        console.log('üöÄ Configura√ß√£o completa do sistema de permiss√µes...\n');
        await createAllPermissions();
        await assignAllPermissionsToRole('SUPER_ADMIN');
        await assignAllPermissionsToRole('ORG_ADMIN');
        await assignAllPermissionsToRole('ORG_USER');
        await assignAllPermissionsToRole('ORG_VIEWER');
        console.log('\nüéâ Sistema de permiss√µes configurado com sucesso!');
        break;
        
      default:
        console.log('Comandos dispon√≠veis:');
        console.log('  create-all                 - Criar todas as permiss√µes');
        console.log('  create-whatsapp            - Criar apenas permiss√µes do WhatsApp');
        console.log('  assign-whatsapp-admins     - Atribuir permiss√µes WhatsApp aos admins');
        console.log('  assign-all-super-admin     - Atribuir todas as permiss√µes ao SUPER_ADMIN');
        console.log('  assign-all-org-admin       - Atribuir permiss√µes ao ORG_ADMIN');
        console.log('  assign-all-org-user        - Atribuir permiss√µes ao ORG_USER');
        console.log('  assign-all-org-viewer      - Atribuir permiss√µes ao ORG_VIEWER');
        console.log('  setup-complete             - Configura√ß√£o completa (recomendado)');
        break;
    }
  } catch (error) {
    console.error('‚ùå Erro:', error);
  } finally {
    await prisma.$disconnect();
  }
}

if (require.main === module) {
  main();
}
