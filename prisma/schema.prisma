// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ORG_ADMIN
  ORG_USER
  ORG_VIEWER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum PermissionAction {
  CREATE
  READ
  UPDATE
  DELETE
  MANAGE
}

enum PermissionResource {
  // Sessões de atendimento
  SESSIONS
  // Contatos/Clientes
  CONTACTS
  // Mensagens
  MESSAGES
  // Configurações da organização
  ORG_SETTINGS
  // Usuários da organização
  ORG_USERS
  // Relatórios
  REPORTS
  // Integrações
  INTEGRATIONS
  // Webhooks
  WEBHOOKS
  // Automações
  AUTOMATIONS
  // Tags
  TAGS
  // Departamentos
  DEPARTMENTS
  // Filas de atendimento
  QUEUES
}

model SuperAdmin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("super_admins")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  status      UserStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  users       User[]

  @@map("organizations")
}

model User {
  id             String     @id @default(cuid())
  email          String     @unique
  password       String
  name           String
  role           UserRole   @default(ORG_USER)
  status         UserStatus @default(PENDING)
  emailVerified  Boolean    @default(false)
  lastLoginAt    DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relacionamentos
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Tokens de recuperação de senha
  passwordResets PasswordReset[]

  // Permissões personalizadas do usuário
  userPermissions UserPermission[]

  @@map("users")
}

model Permission {
  id          String              @id @default(cuid())
  action      PermissionAction
  resource    PermissionResource
  description String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  // Relacionamentos
  rolePermissions RolePermission[]
  userPermissions UserPermission[]

  @@unique([action, resource])
  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(cuid())
  role         UserRole
  permissionId String
  organizationId String?  // null para permissões globais
  createdAt    DateTime   @default(now())

  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([role, permissionId, organizationId])
  @@map("role_permissions")
}

model UserPermission {
  id           String     @id @default(cuid())
  userId       String
  permissionId String
  granted      Boolean    @default(true) // false para revogar permissão específica
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
  @@map("user_permissions")
}

model PasswordReset {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("sessions")
}
